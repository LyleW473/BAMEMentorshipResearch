import json
from os.path import exists as os_path_exists
from os import mkdir
from create_queries import create_queries
import openai

def create_prediction_mappings(prob_number):

    # Create folder for holding the json for results
    if not os_path_exists("results"):
        mkdir("results")
    else:
        # Already generated predictions for this problem
        if os_path_exists(f"results/prob{prob_number}_predictions.json"):
            print(f"Already generated answers for problem {prob_number}")
            return

    # Read question
    with open("prob1.txt") as p_file:
        contents = p_file.readlines()
        # print(contents)

    # Get queries based on the indexes and contents of the question
    idxs = [1, 2, 3, 4, 5, 6]
    queries, indexes_used = create_queries(idxs = idxs, contents = contents)
    print(len(queries))
    for query in queries:
        print(query)
        print("----------------")

    # ----------------------------------------------
    # Generate answers to queries
    mappings = {} # Maps the subquestions used (List of indexes) to the predictions generated by the LLM.

    for i, (query, idxs_used) in enumerate(zip(queries, indexes_used)):
        print(f"i: {i}\nQuery:\n{query}\nIndexes used:\n{idxs_used}\n")

        message_text = [{
                        "role": "system",
                        "content": "You are an AI assistant that helps people find information."
                        },
                        {
                        "role": "user",
                        "content": query
                        }]
        
        answer = (openai.chat.completions.create(
                                                model = "gpt-4",
                                                messages = message_text,
                                                temperature = 0.7,
                                                max_tokens = 800,
                                                top_p = 0.95,
                                                frequency_penalty = 0,
                                                presence_penalty = 0,
                                                stop = None,
                                                )).choices[0].message.content # Extract Python String
        
        # Create hashmap mapping
        indexes_string = "".join(str(idx) + "#" for idx in idxs_used) # Used because cannot have keys as tuple or list when using json.dump
        mappings[indexes_string] = answer
        
        # Save results
        with open("results/prob1_predictions.json", "w") as file:
            json.dump(mappings, file)